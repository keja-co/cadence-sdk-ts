/* tslint:disable */
/* eslint-disable */
/**
 * Cadence API
 * Cadence ERP powers your business with a single platform for all your HR, Class Management, Staff Scheduling, Time Tracking & Communication needs.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuditLog,
  Context,
  ContextKey,
  PatchedAuditLog,
  PatchedContext,
  PatchedContextKey,
  PatchedPermission,
  PatchedRole,
  PatchedRolePermission,
  PatchedUserRoleAssignment,
  Permission,
  Role,
  RolePermission,
  UserRoleAssignment,
} from '../models/index';
import {
    AuditLogFromJSON,
    AuditLogToJSON,
    ContextFromJSON,
    ContextToJSON,
    ContextKeyFromJSON,
    ContextKeyToJSON,
    PatchedAuditLogFromJSON,
    PatchedAuditLogToJSON,
    PatchedContextFromJSON,
    PatchedContextToJSON,
    PatchedContextKeyFromJSON,
    PatchedContextKeyToJSON,
    PatchedPermissionFromJSON,
    PatchedPermissionToJSON,
    PatchedRoleFromJSON,
    PatchedRoleToJSON,
    PatchedRolePermissionFromJSON,
    PatchedRolePermissionToJSON,
    PatchedUserRoleAssignmentFromJSON,
    PatchedUserRoleAssignmentToJSON,
    PermissionFromJSON,
    PermissionToJSON,
    RoleFromJSON,
    RoleToJSON,
    RolePermissionFromJSON,
    RolePermissionToJSON,
    UserRoleAssignmentFromJSON,
    UserRoleAssignmentToJSON,
} from '../models/index';

export interface ComplianceAuditlogsCreateRequest {
    auditLog: Omit<AuditLog, 'id'|'timestamp'>;
}

export interface ComplianceAuditlogsDestroyRequest {
    id: number;
}

export interface ComplianceAuditlogsPartialUpdateRequest {
    id: number;
    patchedAuditLog?: Omit<PatchedAuditLog, 'id'|'timestamp'>;
}

export interface ComplianceAuditlogsRetrieveRequest {
    id: number;
}

export interface ComplianceAuditlogsUpdateRequest {
    id: number;
    auditLog: Omit<AuditLog, 'id'|'timestamp'>;
}

export interface ComplianceContextkeysCreateRequest {
    contextKey: Omit<ContextKey, 'id'>;
}

export interface ComplianceContextkeysDestroyRequest {
    id: number;
}

export interface ComplianceContextkeysPartialUpdateRequest {
    id: number;
    patchedContextKey?: Omit<PatchedContextKey, 'id'>;
}

export interface ComplianceContextkeysRetrieveRequest {
    id: number;
}

export interface ComplianceContextkeysUpdateRequest {
    id: number;
    contextKey: Omit<ContextKey, 'id'>;
}

export interface ComplianceContextsCreateRequest {
    context: Omit<Context, 'id'>;
}

export interface ComplianceContextsDestroyRequest {
    id: number;
}

export interface ComplianceContextsPartialUpdateRequest {
    id: number;
    patchedContext?: Omit<PatchedContext, 'id'>;
}

export interface ComplianceContextsRetrieveRequest {
    id: number;
}

export interface ComplianceContextsUpdateRequest {
    id: number;
    context: Omit<Context, 'id'>;
}

export interface CompliancePermissionsCreateRequest {
    permission: Omit<Permission, 'id'>;
}

export interface CompliancePermissionsDestroyRequest {
    id: number;
}

export interface CompliancePermissionsPartialUpdateRequest {
    id: number;
    patchedPermission?: Omit<PatchedPermission, 'id'>;
}

export interface CompliancePermissionsRetrieveRequest {
    id: number;
}

export interface CompliancePermissionsUpdateRequest {
    id: number;
    permission: Omit<Permission, 'id'>;
}

export interface ComplianceRolepermissionsCreateRequest {
    rolePermission: Omit<RolePermission, 'id'>;
}

export interface ComplianceRolepermissionsDestroyRequest {
    id: number;
}

export interface ComplianceRolepermissionsPartialUpdateRequest {
    id: number;
    patchedRolePermission?: Omit<PatchedRolePermission, 'id'>;
}

export interface ComplianceRolepermissionsRetrieveRequest {
    id: number;
}

export interface ComplianceRolepermissionsUpdateRequest {
    id: number;
    rolePermission: Omit<RolePermission, 'id'>;
}

export interface ComplianceRolesCreateRequest {
    role: Omit<Role, 'id'>;
}

export interface ComplianceRolesDestroyRequest {
    id: number;
}

export interface ComplianceRolesPartialUpdateRequest {
    id: number;
    patchedRole?: Omit<PatchedRole, 'id'>;
}

export interface ComplianceRolesRetrieveRequest {
    id: number;
}

export interface ComplianceRolesUpdateRequest {
    id: number;
    role: Omit<Role, 'id'>;
}

export interface ComplianceUserroleassignmentsCreateRequest {
    userRoleAssignment: Omit<UserRoleAssignment, 'id'>;
}

export interface ComplianceUserroleassignmentsDestroyRequest {
    id: number;
}

export interface ComplianceUserroleassignmentsPartialUpdateRequest {
    id: number;
    patchedUserRoleAssignment?: Omit<PatchedUserRoleAssignment, 'id'>;
}

export interface ComplianceUserroleassignmentsRetrieveRequest {
    id: number;
}

export interface ComplianceUserroleassignmentsUpdateRequest {
    id: number;
    userRoleAssignment: Omit<UserRoleAssignment, 'id'>;
}

/**
 * 
 */
export class ComplianceApi extends runtime.BaseAPI {

    /**
     */
    async complianceAuditlogsCreateRaw(requestParameters: ComplianceAuditlogsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLog>> {
        if (requestParameters['auditLog'] == null) {
            throw new runtime.RequiredError(
                'auditLog',
                'Required parameter "auditLog" was null or undefined when calling complianceAuditlogsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/auditlogs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuditLogToJSON(requestParameters['auditLog']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogFromJSON(jsonValue));
    }

    /**
     */
    async complianceAuditlogsCreate(requestParameters: ComplianceAuditlogsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLog> {
        const response = await this.complianceAuditlogsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceAuditlogsDestroyRaw(requestParameters: ComplianceAuditlogsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceAuditlogsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/auditlogs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async complianceAuditlogsDestroy(requestParameters: ComplianceAuditlogsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.complianceAuditlogsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async complianceAuditlogsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AuditLog>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/auditlogs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuditLogFromJSON));
    }

    /**
     */
    async complianceAuditlogsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AuditLog>> {
        const response = await this.complianceAuditlogsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceAuditlogsPartialUpdateRaw(requestParameters: ComplianceAuditlogsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLog>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceAuditlogsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/auditlogs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAuditLogToJSON(requestParameters['patchedAuditLog']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogFromJSON(jsonValue));
    }

    /**
     */
    async complianceAuditlogsPartialUpdate(requestParameters: ComplianceAuditlogsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLog> {
        const response = await this.complianceAuditlogsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceAuditlogsRetrieveRaw(requestParameters: ComplianceAuditlogsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLog>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceAuditlogsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/auditlogs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogFromJSON(jsonValue));
    }

    /**
     */
    async complianceAuditlogsRetrieve(requestParameters: ComplianceAuditlogsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLog> {
        const response = await this.complianceAuditlogsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceAuditlogsUpdateRaw(requestParameters: ComplianceAuditlogsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLog>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceAuditlogsUpdate().'
            );
        }

        if (requestParameters['auditLog'] == null) {
            throw new runtime.RequiredError(
                'auditLog',
                'Required parameter "auditLog" was null or undefined when calling complianceAuditlogsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/auditlogs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuditLogToJSON(requestParameters['auditLog']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogFromJSON(jsonValue));
    }

    /**
     */
    async complianceAuditlogsUpdate(requestParameters: ComplianceAuditlogsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLog> {
        const response = await this.complianceAuditlogsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceContextkeysCreateRaw(requestParameters: ComplianceContextkeysCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextKey>> {
        if (requestParameters['contextKey'] == null) {
            throw new runtime.RequiredError(
                'contextKey',
                'Required parameter "contextKey" was null or undefined when calling complianceContextkeysCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/contextkeys/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContextKeyToJSON(requestParameters['contextKey']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextKeyFromJSON(jsonValue));
    }

    /**
     */
    async complianceContextkeysCreate(requestParameters: ComplianceContextkeysCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextKey> {
        const response = await this.complianceContextkeysCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceContextkeysDestroyRaw(requestParameters: ComplianceContextkeysDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceContextkeysDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/contextkeys/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async complianceContextkeysDestroy(requestParameters: ComplianceContextkeysDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.complianceContextkeysDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async complianceContextkeysListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContextKey>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/contextkeys/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContextKeyFromJSON));
    }

    /**
     */
    async complianceContextkeysList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContextKey>> {
        const response = await this.complianceContextkeysListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceContextkeysPartialUpdateRaw(requestParameters: ComplianceContextkeysPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextKey>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceContextkeysPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/contextkeys/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedContextKeyToJSON(requestParameters['patchedContextKey']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextKeyFromJSON(jsonValue));
    }

    /**
     */
    async complianceContextkeysPartialUpdate(requestParameters: ComplianceContextkeysPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextKey> {
        const response = await this.complianceContextkeysPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceContextkeysRetrieveRaw(requestParameters: ComplianceContextkeysRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextKey>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceContextkeysRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/contextkeys/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextKeyFromJSON(jsonValue));
    }

    /**
     */
    async complianceContextkeysRetrieve(requestParameters: ComplianceContextkeysRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextKey> {
        const response = await this.complianceContextkeysRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceContextkeysUpdateRaw(requestParameters: ComplianceContextkeysUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextKey>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceContextkeysUpdate().'
            );
        }

        if (requestParameters['contextKey'] == null) {
            throw new runtime.RequiredError(
                'contextKey',
                'Required parameter "contextKey" was null or undefined when calling complianceContextkeysUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/contextkeys/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContextKeyToJSON(requestParameters['contextKey']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextKeyFromJSON(jsonValue));
    }

    /**
     */
    async complianceContextkeysUpdate(requestParameters: ComplianceContextkeysUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextKey> {
        const response = await this.complianceContextkeysUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceContextsCreateRaw(requestParameters: ComplianceContextsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Context>> {
        if (requestParameters['context'] == null) {
            throw new runtime.RequiredError(
                'context',
                'Required parameter "context" was null or undefined when calling complianceContextsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/contexts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContextToJSON(requestParameters['context']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextFromJSON(jsonValue));
    }

    /**
     */
    async complianceContextsCreate(requestParameters: ComplianceContextsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Context> {
        const response = await this.complianceContextsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceContextsDestroyRaw(requestParameters: ComplianceContextsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceContextsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/contexts/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async complianceContextsDestroy(requestParameters: ComplianceContextsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.complianceContextsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async complianceContextsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Context>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/contexts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContextFromJSON));
    }

    /**
     */
    async complianceContextsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Context>> {
        const response = await this.complianceContextsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceContextsPartialUpdateRaw(requestParameters: ComplianceContextsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Context>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceContextsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/contexts/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedContextToJSON(requestParameters['patchedContext']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextFromJSON(jsonValue));
    }

    /**
     */
    async complianceContextsPartialUpdate(requestParameters: ComplianceContextsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Context> {
        const response = await this.complianceContextsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceContextsRetrieveRaw(requestParameters: ComplianceContextsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Context>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceContextsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/contexts/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextFromJSON(jsonValue));
    }

    /**
     */
    async complianceContextsRetrieve(requestParameters: ComplianceContextsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Context> {
        const response = await this.complianceContextsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceContextsUpdateRaw(requestParameters: ComplianceContextsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Context>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceContextsUpdate().'
            );
        }

        if (requestParameters['context'] == null) {
            throw new runtime.RequiredError(
                'context',
                'Required parameter "context" was null or undefined when calling complianceContextsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/contexts/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContextToJSON(requestParameters['context']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextFromJSON(jsonValue));
    }

    /**
     */
    async complianceContextsUpdate(requestParameters: ComplianceContextsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Context> {
        const response = await this.complianceContextsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async compliancePermissionsCreateRaw(requestParameters: CompliancePermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['permission'] == null) {
            throw new runtime.RequiredError(
                'permission',
                'Required parameter "permission" was null or undefined when calling compliancePermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/permissions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionToJSON(requestParameters['permission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     */
    async compliancePermissionsCreate(requestParameters: CompliancePermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.compliancePermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async compliancePermissionsDestroyRaw(requestParameters: CompliancePermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling compliancePermissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/permissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async compliancePermissionsDestroy(requestParameters: CompliancePermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.compliancePermissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async compliancePermissionsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Permission>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/permissions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionFromJSON));
    }

    /**
     */
    async compliancePermissionsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Permission>> {
        const response = await this.compliancePermissionsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async compliancePermissionsPartialUpdateRaw(requestParameters: CompliancePermissionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling compliancePermissionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/permissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPermissionToJSON(requestParameters['patchedPermission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     */
    async compliancePermissionsPartialUpdate(requestParameters: CompliancePermissionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.compliancePermissionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async compliancePermissionsRetrieveRaw(requestParameters: CompliancePermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling compliancePermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/permissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     */
    async compliancePermissionsRetrieve(requestParameters: CompliancePermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.compliancePermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async compliancePermissionsUpdateRaw(requestParameters: CompliancePermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling compliancePermissionsUpdate().'
            );
        }

        if (requestParameters['permission'] == null) {
            throw new runtime.RequiredError(
                'permission',
                'Required parameter "permission" was null or undefined when calling compliancePermissionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/permissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionToJSON(requestParameters['permission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     */
    async compliancePermissionsUpdate(requestParameters: CompliancePermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.compliancePermissionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceRolepermissionsCreateRaw(requestParameters: ComplianceRolepermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolePermission>> {
        if (requestParameters['rolePermission'] == null) {
            throw new runtime.RequiredError(
                'rolePermission',
                'Required parameter "rolePermission" was null or undefined when calling complianceRolepermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/rolepermissions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RolePermissionToJSON(requestParameters['rolePermission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolePermissionFromJSON(jsonValue));
    }

    /**
     */
    async complianceRolepermissionsCreate(requestParameters: ComplianceRolepermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolePermission> {
        const response = await this.complianceRolepermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceRolepermissionsDestroyRaw(requestParameters: ComplianceRolepermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceRolepermissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/rolepermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async complianceRolepermissionsDestroy(requestParameters: ComplianceRolepermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.complianceRolepermissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async complianceRolepermissionsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RolePermission>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/rolepermissions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RolePermissionFromJSON));
    }

    /**
     */
    async complianceRolepermissionsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RolePermission>> {
        const response = await this.complianceRolepermissionsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceRolepermissionsPartialUpdateRaw(requestParameters: ComplianceRolepermissionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolePermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceRolepermissionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/rolepermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRolePermissionToJSON(requestParameters['patchedRolePermission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolePermissionFromJSON(jsonValue));
    }

    /**
     */
    async complianceRolepermissionsPartialUpdate(requestParameters: ComplianceRolepermissionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolePermission> {
        const response = await this.complianceRolepermissionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceRolepermissionsRetrieveRaw(requestParameters: ComplianceRolepermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolePermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceRolepermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/rolepermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolePermissionFromJSON(jsonValue));
    }

    /**
     */
    async complianceRolepermissionsRetrieve(requestParameters: ComplianceRolepermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolePermission> {
        const response = await this.complianceRolepermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceRolepermissionsUpdateRaw(requestParameters: ComplianceRolepermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolePermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceRolepermissionsUpdate().'
            );
        }

        if (requestParameters['rolePermission'] == null) {
            throw new runtime.RequiredError(
                'rolePermission',
                'Required parameter "rolePermission" was null or undefined when calling complianceRolepermissionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/rolepermissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RolePermissionToJSON(requestParameters['rolePermission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolePermissionFromJSON(jsonValue));
    }

    /**
     */
    async complianceRolepermissionsUpdate(requestParameters: ComplianceRolepermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolePermission> {
        const response = await this.complianceRolepermissionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceRolesCreateRaw(requestParameters: ComplianceRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling complianceRolesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/roles/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters['role']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     */
    async complianceRolesCreate(requestParameters: ComplianceRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.complianceRolesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceRolesDestroyRaw(requestParameters: ComplianceRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceRolesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/roles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async complianceRolesDestroy(requestParameters: ComplianceRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.complianceRolesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async complianceRolesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Role>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/roles/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleFromJSON));
    }

    /**
     */
    async complianceRolesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Role>> {
        const response = await this.complianceRolesListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceRolesPartialUpdateRaw(requestParameters: ComplianceRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceRolesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/roles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRoleToJSON(requestParameters['patchedRole']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     */
    async complianceRolesPartialUpdate(requestParameters: ComplianceRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.complianceRolesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceRolesRetrieveRaw(requestParameters: ComplianceRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceRolesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/roles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     */
    async complianceRolesRetrieve(requestParameters: ComplianceRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.complianceRolesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceRolesUpdateRaw(requestParameters: ComplianceRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceRolesUpdate().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling complianceRolesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/roles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters['role']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     */
    async complianceRolesUpdate(requestParameters: ComplianceRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.complianceRolesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceUserroleassignmentsCreateRaw(requestParameters: ComplianceUserroleassignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRoleAssignment>> {
        if (requestParameters['userRoleAssignment'] == null) {
            throw new runtime.RequiredError(
                'userRoleAssignment',
                'Required parameter "userRoleAssignment" was null or undefined when calling complianceUserroleassignmentsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/userroleassignments/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRoleAssignmentToJSON(requestParameters['userRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async complianceUserroleassignmentsCreate(requestParameters: ComplianceUserroleassignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRoleAssignment> {
        const response = await this.complianceUserroleassignmentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceUserroleassignmentsDestroyRaw(requestParameters: ComplianceUserroleassignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceUserroleassignmentsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/userroleassignments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async complianceUserroleassignmentsDestroy(requestParameters: ComplianceUserroleassignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.complianceUserroleassignmentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async complianceUserroleassignmentsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserRoleAssignment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/userroleassignments/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserRoleAssignmentFromJSON));
    }

    /**
     */
    async complianceUserroleassignmentsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserRoleAssignment>> {
        const response = await this.complianceUserroleassignmentsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceUserroleassignmentsPartialUpdateRaw(requestParameters: ComplianceUserroleassignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceUserroleassignmentsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/userroleassignments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserRoleAssignmentToJSON(requestParameters['patchedUserRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async complianceUserroleassignmentsPartialUpdate(requestParameters: ComplianceUserroleassignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRoleAssignment> {
        const response = await this.complianceUserroleassignmentsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceUserroleassignmentsRetrieveRaw(requestParameters: ComplianceUserroleassignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceUserroleassignmentsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/userroleassignments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async complianceUserroleassignmentsRetrieve(requestParameters: ComplianceUserroleassignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRoleAssignment> {
        const response = await this.complianceUserroleassignmentsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async complianceUserroleassignmentsUpdateRaw(requestParameters: ComplianceUserroleassignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complianceUserroleassignmentsUpdate().'
            );
        }

        if (requestParameters['userRoleAssignment'] == null) {
            throw new runtime.RequiredError(
                'userRoleAssignment',
                'Required parameter "userRoleAssignment" was null or undefined when calling complianceUserroleassignmentsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/compliance/userroleassignments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserRoleAssignmentToJSON(requestParameters['userRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async complianceUserroleassignmentsUpdate(requestParameters: ComplianceUserroleassignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRoleAssignment> {
        const response = await this.complianceUserroleassignmentsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
